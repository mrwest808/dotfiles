# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'

'.source.js':
  'export default':
    'prefix': 'ed'
    'leftLabel': 'snippet'
    'body': 'export default $1'

  'function':
    'prefix': 'fn'
    'leftLabel': 'snippet'
    'rightLabelHTML': 'function [name]([...args]) {...}'
    'body': '''
      function $1($2) {
        $3
      }
    '''

  'console.log()':
    'prefix': 'log'
    'leftLabel': 'snippet'
    'body': 'console.log($1)'

  'console.info()':
    'prefix': 'info'
    'leftLabel': 'snippet'
    'body': 'console.info($1)'

  'console.warn()':
    'prefix': 'warn'
    'leftLabel': 'snippet'
    'body': 'console.warn($1)'

  'console.error()':
    'prefix': 'err'
    'leftLabel': 'snippet'
    'body': 'console.error($1)'

  'import':
    'prefix': 'imp'
    'leftLabel': 'snippet'
    'rightLabelHTML': 'import [package] from [path]'
    'body': 'import $1 from \'$2\'$3'

  'react: import':
    'prefix': 'impr'
    'leftLabel': 'snippet'
    'rightLabelHTML': 'import React from \'react\''
    'body': 'import React$1 from \'react\'$2'

  'react: import proptypes':
    'prefix': 'imprp'
    'leftLabel': 'snippet'
    'rightLabelHTML': 'import PropTypes from \'prop-types\''
    'body': 'import PropTypes$1 from \'prop-types\'$2'

  'react: create class':
    'prefix': 'rcc'
    'leftLabel': 'snippet'
    'rightLabelHTML': 'class [Name] extends Component { ... }'
    'body': '''
      class $1 extends Component {
        render() {
          return $2
        }
      }
    '''

  'describe (mocha)':
    'prefix': 'describe'
    'leftLabel': 'snippet'
    'rightLabelHTML': 'describe([section], () => { ... })'
    'body': '''
      describe('$1', () => {
        ${2:// ..}
      })$3
    '''

  'it (mocha)':
    'prefix': 'it'
    'leftLabel': 'snippet'
    'rightLabelHTML': 'it([should], () => { ... })'
    'body': '''
      it('$1', ($2) => {
        ${3:// ..}
      })$4
    '''

'.source.gfm':
  'Todo item':
    'prefix': 'td'
    'body': '- [Â ] $1'

'.source.css.scss':
  'comment':
    'prefix': 'comment'
    'leftLabel': 'snippet'
    'body': '''
      // ----------------------------------
      // ${1:...}
      // ----------------------------------
    '''

  '@import':
    'prefix': 'import'
    'leftLabel': 'snippet'
    'rightLabelHTML': '@import \'[path]\''
    'body': '@import \'$1\';$2'

  '@charset':
      'prefix': 'charset'
      'leftLabel': 'snippet'
      'rightLabelHTML': '@charset \'[encoding]\''
      'body': '@charset \'${1:UTF-8}\';$2'

  '@return':
    'prefix': 'return'
    'leftLabel': 'snippet'
    'body': '@return $1;'

  '@else':
    'prefix': 'else'
    'leftLabel': 'snippet'
    'rightLabelHTML': '@else { ... }'
    'body': '''
      @else {
        $1
      }
    '''

  '@else if':
    'prefix': 'elif'
    'leftLabel': 'snippet'
    'rightLabelHTML': '@else if [conditions] { ... }'
    'body': '''
      @else if ${1:conditions} {
        $2
      }
    '''

  '@debug':
    'prefix': 'debug'
    'leftLabel': 'snippet'
    'body': '@debug $1;'
